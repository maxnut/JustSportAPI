swagger: '2.0'
info:
  title: JustSport API
  version: 2.0.0
basePath: /justsport
host: api.le0nardo.dev
schemes:
  - https
paths:
  /user/register:
    post:
      summary: Endpoint for user registration
      description: Register a new user with email and password.
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/json
      parameters:
        - name: email
          in: formData
          description: User's email address
          required: false
          type: string
        - name: password
          in: formData
          description: User's password
          required: false
          type: string
      responses:
        '200':
          description: User successfully registered
          schema:
            type: object
            properties:
              response_message:
                type: string
                example: User registered.
              response_code:
                type: integer
                example: 200
        '400':
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/Error'
        '452':
          description: User already exists
          schema:
            type: object
            properties:
              response_message:
                type: string
                example: User with this email already exists.
              response_code:
                type: integer
                example: 452
        '453':
          description: The provided email is invalid
          schema:
            type: object
            properties:
              response_message:
                type: string
                example: The provided email is invalid.
              response_code:
                type: integer
                example: 453
        '454':
          description: The provided type is invalid
          schema:
            type: object
            properties:
              response_message:
                type: string
                example: The provided type is invalid.
              response_code:
                type: integer
                example: 454
  /user/login:
    post:
      summary: Endpoint for user login
      description: Authenticate user by email and password.
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/json
      parameters:
        - name: email
          in: formData
          description: User's email address
          required: false
          type: string
        - name: password
          in: formData
          description: User's password
          required: false
          type: string
      responses:
        '200':
          description: User successfully logged in
          schema:
            type: object
            properties:
              response_message:
                type: string
                example: Login successful
              response_code:
                type: integer
                example: 200
        '400':
          description: Invalid request parameters
          schema:
              $ref: '#/definitions/Error'
        '452':
          description: Login failed
          schema:
            type: object
            properties:
              response_message:
                type: string
                example: Wrong username or password.
              response_code:
                type: integer
                example: 452
  
  /tournament/add:
    post:
      summary: Adds a new tournament
      description: Adds a new tournament to the table "Tournaments"
      consumes:
        - application/json
        - application/x-www-form-urlencoded
      produces:
        - application/json
      parameters:
          
        - name: name
          in: formData
          description: name of the tournament
          required: true
          type: string
          
        - name: sport
          in: formData
          description: the sport of the tournament
          required: true
          type: string
          
        - name: startDate
          in: formData
          description: starting date of the tournamnet
          required: true
          type: string
        
        - name: endDate
          in: formData
          description: ending date of the tournamnet
          required: true
          type: string
          
        - name: subDate
          in: formData
          description: last date for the subscription
          required: true
          type: string
          
        - name: type
          in: formData
          description: type of tournament (amateur or scholastic)
          required: true
          type: string
          enum: [amatoriale, extrascolastico]
          
        - name: maxSubscription
          in: formData
          description: maximum number of team
          required: true
          type: integer
          
        - name: minSubscription
          in: formData
          description: minimum number of team
          required: true
          type: integer
        
        - name: matchCount
          in: formData
          description: number of match of the tournament
          required: true
          type: integer

      responses:
        '200':
          description: Tournament added successfully
          schema:
            $ref: '#/definitions/Response'
        '400':
          description: Invalid request
          schema:
            $ref: '#/definitions/Error'
  /tournament/get:
    post:
      summary: Shows all the tournaments
      description: Returns all the tournaments of depending on who's asking (amateur or student/professor)
      produces:
        - application/json
      consumes:
        - application/json
        - application/x-www-form-urlencoded
        
      parameters:
        - name: type
          in: formData
          description: sport of the tournaments
          required: false
          type: string
        - name: start_date
          in: formData
          description: starting date
          required: false
          type: string
      responses:
        '200':
          description: Tournaments list
          schema:
            $ref: '#/definitions/TournamentList'
        '400':
          description: Error of the server
          schema:
            $ref: '#/definitions/Error'
  /team/add:
    post:
      summary: Adds a new Team
      description: Adds a new team to the table "Teams"
      consumes:
        - application/json
        - application/x-www-form-urlencoded
      produces:
        - application/json
      parameters:
        - name: name
          in: formData
          description: name of the team
          required: true
          type: string
          
      responses:
        '200':
          description: Team added successfully
          schema:
            $ref: '#/definitions/Response'
        '400':
          description: Invalid request
          schema:
            $ref: '#/definitions/Error'
            
  /team/get:
    post:
      summary: Shows the teams of a Tournament
      description: Shows all the teams of a Tournament
      consumes:
        - application/json
        - application/x-www-form-urlencoded
      produces:
        - application/json
      responses:
        '200':
          description: Team list
          schema:
            $ref: '#/definitions/TeamList'
        '400':
          description: Error of the server
          schema:
            $ref: '#/definitions/Error'
            
  /user/logout:
    post:
      summary: Permits the logout
      description: Permits the logout from the site
      
      responses:
        '200':
          description: logged out
          
  /match/add !WORKINPROGRESS!:
    post:
      summary: creates a new match
      description: Add a record in the table Matches
      consumes:
        - application/json
        - application/x-www-form-urlencoded
      produces:
        - application/json
      
      
      responses:
        '200':
          description: metch added
        '400':
          description: error of the server
          
  /team/subscribe:
    post:
      summary: connection between users and teams
      description: creates the connection between the users and the teams
      consumes:
        - application/json
        - application/x-www-form-urlencoded
      produces:
        - application/json
      parameters:
        - name: team_id
          in: formData
          description: id of the team that your are singning up
          required: true
          type: integer
          
        - name: user_email
          in: formData
          description: id of the person you are singning up
          required: true
          type: integer
      
      responses:
        '200':
          description: the user has been signed up
        '400':
          description: error of the server
          
          
  /tournament/subscribe !WORKINPROGRESS!:
    post:
      summary: connection between teams and tournament
      description: creates the connection between the teams and the tournament
      consumes:
        - application/json
        - application/x-www-form-urlencoded
      produces:
        - application/json
      parameters:
        - name: team_id
          in: formData
          description: id of the team that your are singning up
          required: true
          type: integer
          
        - name: tournament_id
          in: formData
          description: id of the tournament
          required: true
          type: integer
      
      responses:
        '200':
          description: the team has been signed up
        '400':
          description: error of the server
          
          
definitions:
  Error:
    type: object
    properties:
      response_message:
        type: string
        example: One or more fields are empty.
      response_code:
        type: integer
        example: 400
  Response:
    type: object
    properties:
      response_message:
        type: string
        example: "answer"
      response_code:
        type: integer
        example: 200
  Tournament:
    type: object
    properties:

      response_message:
        type: string
        example: "response message"
      response_code: 
        type: integer
        example: 200
      response_content:
        type: object
        properties:
          id: 
            type: integer
            example: 10
          name:
            type: string
            example: "name"
          sport:
            type: string
            example: "basket"
          start_date:
            type: string
            format: date
            example: "01/01/2024"
          end_date:
            type: string
            format: date
            example: "31/12/2024"
          subscription_date:
            type: string
            format: date
            example: "15/06/2024"
          type:
            type: string
            enum: [amatoriale, extrascolastico]
            example: "amatoriale"
          max_subscriptions:
            type: integer
            example: 12
          min_subscriptions:
            type: integer
            example: 10
          match_count:
            type: integer
            example: 10
      
  TournamentList:
    type: array
    items:
      $ref: '#/definitions/Tournament'
  Team:
    type: object
    properties: 
      id:
        type: integer
        example: 10
      name:
        type: string
        example: "Team1"
  TeamList:
    type: array
    items:
      $ref: '#/definitions/Team'
    